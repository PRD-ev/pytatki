# Query
type Query {
  users: [User!]
  user(id: ID!): User
  group(id: ID!): Group
  folder(id: ID!): Folder
  note(id: ID!): Note
}

type Mutation {
  createGroup(name: String!): Group!
  updateGroup(id: ID!, name: String, image: String): Group
  deleteGroup(id: ID!): Group
  createNote(title: String! type:NoteType! groupId: ID! parentFolderId: ID!): Note!
  updateNote(id: ID!, title: String, image: String): Note
  deleteNote(id: ID!): Note
  createFolder(title: String! groupId: ID! parentFolderId: ID!): Folder!
  updateFolder(id: ID!, name: String, image: String): Folder
  deleteFolder(id: ID!): Folder
  removeUserFromGroup(groupId: ID!, userId: ID!): Group
  addUserToGroup(groupId: ID!, userId: ID!): Group
}

# Types
type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
  notes: [Note!]
  groups: [Group!]
  adminOf: [User!]
}

type Note {
  id: ID!
  type: NoteType!
  title: String!
  author: User!
  parentFolder: Folder
  group: Group!
  content: String!
}

type Folder {
  id: ID!
  title: String!
  author: User!
  parentFolder: Folder
  group: Group!
  notes: [Note!]
  folders: [Folder!]
}

type Group {
  id: ID!
  name: String!
  image: String
  admins: [User!]!
  members: [User!]
  notes: [Note!]
  folders: [Folder!]
}

# Scalars
enum NoteType {
  DOWNLOAD
  PYTATKI
  EXTERNAL
}
