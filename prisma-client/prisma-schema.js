module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFolder {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateNote {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Folder {
  id: ID!
  title: String!
  author: User!
  parentFolder: Folder
  group: Group!
}

type FolderConnection {
  pageInfo: PageInfo!
  edges: [FolderEdge]!
  aggregate: AggregateFolder!
}

input FolderCreateInput {
  id: ID
  title: String!
  author: UserCreateOneInput!
  parentFolder: FolderCreateOneInput
  group: GroupCreateOneWithoutFoldersInput!
}

input FolderCreateManyWithoutGroupInput {
  create: [FolderCreateWithoutGroupInput!]
  connect: [FolderWhereUniqueInput!]
}

input FolderCreateOneInput {
  create: FolderCreateInput
  connect: FolderWhereUniqueInput
}

input FolderCreateWithoutGroupInput {
  id: ID
  title: String!
  author: UserCreateOneInput!
  parentFolder: FolderCreateOneInput
}

type FolderEdge {
  node: Folder!
  cursor: String!
}

enum FolderOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type FolderPreviousValues {
  id: ID!
  title: String!
}

input FolderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [FolderScalarWhereInput!]
  OR: [FolderScalarWhereInput!]
  NOT: [FolderScalarWhereInput!]
}

type FolderSubscriptionPayload {
  mutation: MutationType!
  node: Folder
  updatedFields: [String!]
  previousValues: FolderPreviousValues
}

input FolderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FolderWhereInput
  AND: [FolderSubscriptionWhereInput!]
}

input FolderUpdateDataInput {
  title: String
  author: UserUpdateOneRequiredInput
  parentFolder: FolderUpdateOneInput
  group: GroupUpdateOneRequiredWithoutFoldersInput
}

input FolderUpdateInput {
  title: String
  author: UserUpdateOneRequiredInput
  parentFolder: FolderUpdateOneInput
  group: GroupUpdateOneRequiredWithoutFoldersInput
}

input FolderUpdateManyDataInput {
  title: String
}

input FolderUpdateManyMutationInput {
  title: String
}

input FolderUpdateManyWithoutGroupInput {
  create: [FolderCreateWithoutGroupInput!]
  delete: [FolderWhereUniqueInput!]
  connect: [FolderWhereUniqueInput!]
  set: [FolderWhereUniqueInput!]
  disconnect: [FolderWhereUniqueInput!]
  update: [FolderUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [FolderUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [FolderScalarWhereInput!]
  updateMany: [FolderUpdateManyWithWhereNestedInput!]
}

input FolderUpdateManyWithWhereNestedInput {
  where: FolderScalarWhereInput!
  data: FolderUpdateManyDataInput!
}

input FolderUpdateOneInput {
  create: FolderCreateInput
  update: FolderUpdateDataInput
  upsert: FolderUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: FolderWhereUniqueInput
}

input FolderUpdateWithoutGroupDataInput {
  title: String
  author: UserUpdateOneRequiredInput
  parentFolder: FolderUpdateOneInput
}

input FolderUpdateWithWhereUniqueWithoutGroupInput {
  where: FolderWhereUniqueInput!
  data: FolderUpdateWithoutGroupDataInput!
}

input FolderUpsertNestedInput {
  update: FolderUpdateDataInput!
  create: FolderCreateInput!
}

input FolderUpsertWithWhereUniqueWithoutGroupInput {
  where: FolderWhereUniqueInput!
  update: FolderUpdateWithoutGroupDataInput!
  create: FolderCreateWithoutGroupInput!
}

input FolderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: UserWhereInput
  parentFolder: FolderWhereInput
  group: GroupWhereInput
  AND: [FolderWhereInput!]
}

input FolderWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  name: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  image: String
  folders(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folder!]
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutGroupsInput
  image: String
  folders: FolderCreateManyWithoutGroupInput
  notes: NoteCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutFoldersInput {
  create: GroupCreateWithoutFoldersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutNotesInput {
  create: GroupCreateWithoutNotesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutFoldersInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutGroupsInput
  image: String
  notes: NoteCreateManyWithoutGroupInput
}

input GroupCreateWithoutMembersInput {
  id: ID
  name: String!
  image: String
  folders: FolderCreateManyWithoutGroupInput
  notes: NoteCreateManyWithoutGroupInput
}

input GroupCreateWithoutNotesInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutGroupsInput
  image: String
  folders: FolderCreateManyWithoutGroupInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
  image: String
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  members: UserUpdateManyWithoutGroupsInput
  image: String
  folders: FolderUpdateManyWithoutGroupInput
  notes: NoteUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  image: String
}

input GroupUpdateManyMutationInput {
  name: String
  image: String
}

input GroupUpdateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutFoldersInput {
  create: GroupCreateWithoutFoldersInput
  update: GroupUpdateWithoutFoldersDataInput
  upsert: GroupUpsertWithoutFoldersInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateOneRequiredWithoutNotesInput {
  create: GroupCreateWithoutNotesInput
  update: GroupUpdateWithoutNotesDataInput
  upsert: GroupUpsertWithoutNotesInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutFoldersDataInput {
  name: String
  members: UserUpdateManyWithoutGroupsInput
  image: String
  notes: NoteUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutMembersDataInput {
  name: String
  image: String
  folders: FolderUpdateManyWithoutGroupInput
  notes: NoteUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutNotesDataInput {
  name: String
  members: UserUpdateManyWithoutGroupsInput
  image: String
  folders: FolderUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMembersDataInput!
}

input GroupUpsertWithoutFoldersInput {
  update: GroupUpdateWithoutFoldersDataInput!
  create: GroupCreateWithoutFoldersInput!
}

input GroupUpsertWithoutNotesInput {
  update: GroupUpdateWithoutNotesDataInput!
  create: GroupCreateWithoutNotesInput!
}

input GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_some: UserWhereInput
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  folders_some: FolderWhereInput
  notes_some: NoteWhereInput
  AND: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFolder(data: FolderCreateInput!): Folder!
  updateFolder(data: FolderUpdateInput!, where: FolderWhereUniqueInput!): Folder
  updateManyFolders(data: FolderUpdateManyMutationInput!, where: FolderWhereInput): BatchPayload!
  upsertFolder(where: FolderWhereUniqueInput!, create: FolderCreateInput!, update: FolderUpdateInput!): Folder!
  deleteFolder(where: FolderWhereUniqueInput!): Folder
  deleteManyFolders(where: FolderWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createNote(data: NoteCreateInput!): Note!
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateManyNotes(data: NoteUpdateManyMutationInput!, where: NoteWhereInput): BatchPayload!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Note {
  id: ID!
  type: NoteType!
  title: String!
  author: User!
  content: String!
  parentFolder: Folder
  group: Group!
}

type NoteConnection {
  pageInfo: PageInfo!
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  id: ID
  type: NoteType!
  title: String!
  author: UserCreateOneWithoutNotesInput!
  content: String!
  parentFolder: FolderCreateOneInput
  group: GroupCreateOneWithoutNotesInput!
}

input NoteCreateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateManyWithoutGroupInput {
  create: [NoteCreateWithoutGroupInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutAuthorInput {
  id: ID
  type: NoteType!
  title: String!
  content: String!
  parentFolder: FolderCreateOneInput
  group: GroupCreateOneWithoutNotesInput!
}

input NoteCreateWithoutGroupInput {
  id: ID
  type: NoteType!
  title: String!
  author: UserCreateOneWithoutNotesInput!
  content: String!
  parentFolder: FolderCreateOneInput
}

type NoteEdge {
  node: Note!
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type NotePreviousValues {
  id: ID!
  type: NoteType!
  title: String!
  content: String!
}

input NoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: NoteType
  type_not: NoteType
  type_in: [NoteType!]
  type_not_in: [NoteType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
  AND: [NoteSubscriptionWhereInput!]
}

enum NoteType {
  DOWNLOAD
  PYTATKI
  EXTERNAL
}

input NoteUpdateInput {
  type: NoteType
  title: String
  author: UserUpdateOneRequiredWithoutNotesInput
  content: String
  parentFolder: FolderUpdateOneInput
  group: GroupUpdateOneRequiredWithoutNotesInput
}

input NoteUpdateManyDataInput {
  type: NoteType
  title: String
  content: String
}

input NoteUpdateManyMutationInput {
  type: NoteType
  title: String
  content: String
}

input NoteUpdateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithoutGroupInput {
  create: [NoteCreateWithoutGroupInput!]
  delete: [NoteWhereUniqueInput!]
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [NoteScalarWhereInput!]
  updateMany: [NoteUpdateManyWithWhereNestedInput!]
}

input NoteUpdateManyWithWhereNestedInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyDataInput!
}

input NoteUpdateWithoutAuthorDataInput {
  type: NoteType
  title: String
  content: String
  parentFolder: FolderUpdateOneInput
  group: GroupUpdateOneRequiredWithoutNotesInput
}

input NoteUpdateWithoutGroupDataInput {
  type: NoteType
  title: String
  author: UserUpdateOneRequiredWithoutNotesInput
  content: String
  parentFolder: FolderUpdateOneInput
}

input NoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutAuthorDataInput!
}

input NoteUpdateWithWhereUniqueWithoutGroupInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutGroupDataInput!
}

input NoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutAuthorDataInput!
  create: NoteCreateWithoutAuthorInput!
}

input NoteUpsertWithWhereUniqueWithoutGroupInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutGroupDataInput!
  create: NoteCreateWithoutGroupInput!
}

input NoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: NoteType
  type_not: NoteType
  type_in: [NoteType!]
  type_not_in: [NoteType!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  parentFolder: FolderWhereInput
  group: GroupWhereInput
  AND: [NoteWhereInput!]
}

input NoteWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  folder(where: FolderWhereUniqueInput!): Folder
  folders(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folder]!
  foldersConnection(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolderConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  folder(where: FolderSubscriptionWhereInput): FolderSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
  notes: NoteCreateManyWithoutAuthorInput
  groups: GroupCreateManyWithoutMembersInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGroupsInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
  notes: NoteCreateManyWithoutAuthorInput
}

input UserCreateWithoutNotesInput {
  id: ID
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
  groups: GroupCreateManyWithoutMembersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  image_ASC
  image_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
  email: String!
  role: String!
  image: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  password: String
  email: String
  role: String
  image: String
  notes: NoteUpdateManyWithoutAuthorInput
  groups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateInput {
  name: String
  password: String
  email: String
  role: String
  image: String
  notes: NoteUpdateManyWithoutAuthorInput
  groups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateManyDataInput {
  name: String
  password: String
  email: String
  role: String
  image: String
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  email: String
  role: String
  image: String
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutNotesInput {
  create: UserCreateWithoutNotesInput
  update: UserUpdateWithoutNotesDataInput
  upsert: UserUpsertWithoutNotesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  password: String
  email: String
  role: String
  image: String
  notes: NoteUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutNotesDataInput {
  name: String
  password: String
  email: String
  role: String
  image: String
  groups: GroupUpdateManyWithoutMembersInput
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutNotesInput {
  update: UserUpdateWithoutNotesDataInput!
  create: UserCreateWithoutNotesInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  notes_some: NoteWhereInput
  groups_some: GroupWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    